name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger the pipeline on push to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger the pipeline on pull request to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest  # The job runs on the latest Ubuntu environment

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx to allow multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Login to Azure Container Registry (ACR)
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: <your_acr_name>.azurecr.io  # The login server for your ACR
          username: ${{ secrets.ACR_USERNAME }}    # Your ACR username from secrets
          password: ${{ secrets.ACR_PASSWORD }}    # Your ACR password from secrets

      # Step 4: Build and Push Docker Image to Azure Container Registry
      - name: Build and Push Docker Image
        run: |
          docker build -t <your_acr_name>.azurecr.io/hello-world:latest .  # Build the Docker image
          docker push <your_acr_name>.azurecr.io/hello-world:latest  # Push the built image to ACR

  deploy:
    runs-on: ubuntu-latest  # This job runs after the build job and on the latest Ubuntu environment
    needs: build  # This job depends on the 'build' job to be completed first

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up kubectl to interact with the Kubernetes cluster (AKS)
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          kubectl-version: 'latest'  # Ensure we are using the latest version of kubectl
          kubeconfig: ${{ secrets.KUBECONFIG }}  # Kubernetes config from GitHub secrets

      # Step 3: Deploy the application to Azure Kubernetes Service (AKS)
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/deployment.yaml  # Apply the Kubernetes deployment manifest
          kubectl rollout status deployment/hello-world-app  # Check the deployment status
